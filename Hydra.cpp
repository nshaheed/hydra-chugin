//-----------------------------------------------------------------------------
// Entaro ChucK Developer!
// This is a Chugin boilerplate, generated by chuginate!
//-----------------------------------------------------------------------------

/* TODO LIST
   - [DONE] pass in args to python program (string interpolation?)
   - [DONE] take in the python output as std in (after converting to json)
   - [DONE] parse in as json
   - [TODO] structure as only strings
   - [TODO] handle error case: if json conversion fails, print error and return nil
   - outputs dir
     - make outputs dir (mkdir -p): ./outputs/YYYY-MM-DD/HH-MM-SS/
       - alternatively, have hydra make this and pass it as metadata (it already will?)
   - maybe have more structured dict
     - hydra type
       - hydra.get("key"): returns Hydra if contents is another hydra struct, error if it's a value
       - hydra.int(): returns int if current Hydra object contains a value, error on
         missing or type conversion
       - hydra.float() etc...
       - ex: hydra.get("foo").get("bar").int() => int a;
     - hydra.dir() - get proper output dir
   - pass args override from cmd line (see if I can do this automatically)
     - chuck hydra.ck:foo=2:bar=4
 */

// this should align with the correct versions of these ChucK files
#include "chuck_dl.h"
#include "chuck_def.h"

// general includes
#include <stdio.h>
#include <limits.h>
#include <iostream>

#include "nlohmann/json.hpp"
using json = nlohmann::json;

// declaration of chugin constructor
CK_DLL_CTOR(hydra_ctor);
// declaration of chugin desctructor
CK_DLL_DTOR(hydra_dtor);

// example of getter/setter
CK_DLL_MFUN(hydra_setParam);
CK_DLL_MFUN(hydra_getParam);

CK_DLL_MFUN(hydra_init);

// this is a special offset reserved for Chugin internal data
t_CKINT hydra_data_offset = 0;


// class definition for internal Chugin data
// (note: this isn't strictly necessary, but serves as example
// of one recommended approach)
class Hydra
{
public:
  // constructor
  Hydra( )
  {
    m_param = 0;
  }

  // set parameter example
  t_CKFLOAT setParam( t_CKFLOAT p )
  {
    m_param = p;
    return p;
  }

  // get parameter example
  t_CKFLOAT getParam() { return m_param; }

  // take in:
  // - config_path
  // - config_name
  // - overrides (list of strings) (later)
  //
  // will pass things into python program and call
  // the dirs
  void init(std::string config_path, std::string config_name) {
    // This is hacky but what are ya gonna do?
    std::string cmd = "python config_init.py " + config_path + " " + config_name;
    std::string result = exec(cmd);

    // TODO add a try catch block here to handle parse error
    auto j = json::parse(result);
    std::cout << j["db"] << std::endl;

    for (auto& element : j.items()) {
      std::cout << element.key() << ", " << element.value() << '\n';

      if (element.value().is_object()) {
        std::cout << "poop\n";
      }
    }
  }
    
private:
  // instance data
  t_CKFLOAT m_param;

  // execute cmd and return the stdout as a string
  // see the link for how to deal with windows
  // https://stackoverflow.com/questions/478898/how-do-i-execute-a-command-and-get-the-output-of-the-command-within-c-using-po
  std::string exec(std::string cmd) {
    std::array<char, 128> buffer;
    std::string result;
    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd.c_str(), "r"), pclose);
    if (!pipe) {
      throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
      result += buffer.data();
    }
    return result;
  }
};


// query function: chuck calls this when loading the Chugin
// NOTE: developer will need to modify this function to
// add additional functions to this Chugin
CK_DLL_QUERY( Hydra )
{
    // hmm, don't change this...
    QUERY->setname(QUERY, "Hydra");
    
    // begin the class definition
    // can change the second argument to extend a different ChucK class
    QUERY->begin_class(QUERY, "Hydra", "UGen");

    // register the constructor (probably no need to change)
    QUERY->add_ctor(QUERY, hydra_ctor);
    // register the destructor (probably no need to change)
    QUERY->add_dtor(QUERY, hydra_dtor);

    // example of adding setter method
    QUERY->add_mfun(QUERY, hydra_setParam, "float", "param");
    // example of adding argument to the above method
    QUERY->add_arg(QUERY, "float", "arg");

    // example of adding getter method
    QUERY->add_mfun(QUERY, hydra_getParam, "float", "param");

    // init method
    QUERY->add_mfun(QUERY, hydra_init, "void", "init");
    QUERY->add_arg(QUERY, "string", "config_path");
    QUERY->add_arg(QUERY, "string", "config_name");
    
    // this reserves a variable in the ChucK internal class to store 
    // referene to the c++ class we defined above
    hydra_data_offset = QUERY->add_mvar(QUERY, "int", "@h_data", false);

    // end the class definition
    // IMPORTANT: this MUST be called!
    QUERY->end_class(QUERY);

    // wasn't that a breeze?
    return TRUE;
}

// implementation for the constructor
CK_DLL_CTOR(hydra_ctor)
{
  // get the offset where we'll store our internal c++ class pointer
  OBJ_MEMBER_INT(SELF, hydra_data_offset) = 0;
    
  // instantiate our internal c++ class representation
  Hydra * h_obj = new Hydra();
    
  // store the pointer in the ChucK object member
  OBJ_MEMBER_INT(SELF, hydra_data_offset) = (t_CKINT) h_obj;

  std::cout << "leaving constructor" << std::endl;
}


// implementation for the destructor
CK_DLL_DTOR(hydra_dtor)
{
    // get our c++ class pointer
    Hydra * h_obj = (Hydra *) OBJ_MEMBER_INT(SELF, hydra_data_offset);
    // check it
    if( h_obj )
    {
        // clean up
        delete h_obj;
        OBJ_MEMBER_INT(SELF, hydra_data_offset) = 0;
        h_obj = NULL;
    }
}


// example implementation for setter
CK_DLL_MFUN(hydra_setParam)
{
  // get our c++ class pointer
  Hydra * h_obj = (Hydra *) OBJ_MEMBER_INT(SELF, hydra_data_offset);
  // set the return value
  RETURN->v_float = h_obj->setParam(GET_NEXT_FLOAT(ARGS));
}


// example implementation for getter
CK_DLL_MFUN(hydra_getParam)
{
    // get our c++ class pointer
    Hydra * h_obj = (Hydra *) OBJ_MEMBER_INT(SELF, hydra_data_offset);
    // set the return value
    RETURN->v_float = h_obj->getParam();
}


CK_DLL_MFUN(hydra_init)
{
    // get our c++ class pointer
    Hydra * h_obj = (Hydra *) OBJ_MEMBER_INT(SELF, hydra_data_offset);

    std::string config_path = GET_NEXT_STRING_SAFE(ARGS);
    std::string config_name = GET_NEXT_STRING_SAFE(ARGS);

    h_obj->init(config_path, config_name);
    // // set the return value
    // RETURN->v_float = h_obj->getParam();
}
